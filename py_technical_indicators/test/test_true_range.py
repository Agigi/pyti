import unittest
import numpy as np

from sample_data import SampleData
from technical_indicators import true_range


class TestTrueRange(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.close_data = SampleData().get_sample_close_data()
        self.high_data = SampleData().get_sample_high_data()
        self.low_data = SampleData().get_sample_low_data()

        self.true_range_expected = [np.nan, 7.9699999999999136,
        5.2300000000000182, 5.7799999999999727, 5.1900000000000546,
        4.7099999999999227, 4.6599999999999682, 4.5899999999999181, 4.75,
        4.9099999999999682, 5.3899999999999864, 5.1900000000000546,
        5.3499999999999091, 10.0, 5.1299999999999955, 16.670000000000073,
        6.5999999999999091, 17.540000000000077, 4.9800000000000182,
        15.759999999999991, 4.9699999999999136, 9.5399999999999636,
        10.879999999999995, 5.9200000000000728, 7.7699999999999818,
        4.9900000000000091, 4.5199999999999818, 4.9400000000000546, 11.75,
        7.8299999999999272, 8.2199999999999136, 7.4800000000000182,
        24.419999999999959, 16.039999999999964, 5.9800000000000182,
        23.170000000000073, 4.8999999999999773, 12.710000000000036,
        23.889999999999986, 4.2800000000000864, 4.6800000000000637,
        14.600000000000023, 5.2700000000000955, 7.2900000000000773,
        5.0999999999999091, 4.7400000000000091, 5.2599999999999909,
        5.0499999999999545, 13.980000000000018, 5.3799999999999955,
        4.5099999999999909, 7.6200000000000045, 17.519999999999982,
        4.7000000000000455, 5.5500000000000682, 5.4199999999999591,
        4.5099999999999909, 4.8600000000000136, 16.0, 5.7899999999999636,
        4.7000000000000455, 5.6200000000000045, 5.3099999999999454,
        4.4599999999999227, 5.5, 5.3399999999999181, 5.0399999999999636,
        10.460000000000036, 10.190000000000055, 4.9700000000000273, 13.25,
        7.8199999999999363, 6.5399999999999636, 4.4400000000000546, 5.25,
        13.230000000000018, 5.5800000000000409, 7.25, 12.970000000000027,
        11.579999999999927, 5.0900000000000318, 5.1700000000000728,
        13.309999999999945, 8.2100000000000364, 5.6800000000000637,
        4.7300000000000182, 4.7099999999999227, 5.4800000000000182,
        4.9199999999999591, 4.6399999999999864, 4.9800000000000182,
        4.4400000000000546, 5.3400000000000318, 5.3799999999999955,
        5.6499999999999773, 6.4599999999999227, 4.6399999999999864,
        4.6899999999999409, 4.9900000000000091, 4.5799999999999272,
        5.0800000000000409, 5.1800000000000637, 4.5999999999999091,
        12.299999999999955, 5.0, 4.3299999999999272, 5.2999999999999545,
        11.780000000000086, 28.060000000000059, 6.2100000000000364,
        7.1600000000000819, 4.9699999999999136, 4.3999999999999773,
        7.0199999999999818, 5.07000000000005, 6.1800000000000637,
        5.5399999999999636, 20.300000000000068, 5.2000000000000455,
        8.7299999999999045, 4.8799999999999955, 7.75, 11.620000000000005,
        12.870000000000005, 5.6399999999999864, 6.3899999999999864,
        5.32000000000005]

    def test_true_range(self):
        tr = true_range.true_range(self.close_data, self.high_data, self.low_data)
        np.testing.assert_array_equal(tr, self.true_range_expected)

    def test_true_range_invalid(self):
        self.close_data.append(1)
        with self.assertRaises(Exception):
            tr = true_range.true_range(self.close_data, self.high_data, self.low_data)
