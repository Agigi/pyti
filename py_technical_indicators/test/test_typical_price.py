import unittest
import numpy as np

from sample_data import SampleData
from technical_indicators import typical_price


class TestAccumulationDistribution(unittest.TestCase):
    def setUp(self):
        """Create data to use for testing."""
        self.close_data = SampleData().get_sample_close_data()
        self.high_data = SampleData().get_sample_high_data()
        self.low_data = SampleData().get_sample_low_data()

        self.tp_expected = [265.81, 269.25333333333333, 269.93333333333334,
        271.9033333333333, 270.99666666666667, 271.4633333333333,
        272.2866666666667, 273.2633333333333, 272.2966666666667,
        271.49333333333334, 273.68, 274.36, 273.56333333333333,
        270.82666666666665, 271.5266666666667, 266.70666666666665, 265.69,
        260.32, 261.06666666666666, 256.3533333333333, 256.43333333333334,
        260.11, 264.91333333333336, 263.36333333333334, 261.6366666666667,
        261.33, 263.17333333333335, 263.24666666666667, 260.60333333333335,
        263.68666666666667, 261.51666666666665, 260.2, 252.73333333333335,
        258.86333333333334, 261.7, 270.09, 272.29333333333335, 269.04,
        262.27000000000004, 262.1566666666667, 264.3666666666667,
        270.2766666666667, 271.72333333333336, 274.77, 274.09,
        275.61333333333334, 277.93666666666667, 280.2633333333333,
        276.19666666666666, 275.67, 277.2, 275.3066666666667, 270.8666666666667,
        269.7666666666667, 269.8766666666667, 272.29, 271.36, 273.01,
        268.6466666666667, 269.62333333333333, 268.6433333333334,
        269.46999999999997, 268.49333333333334, 269.5066666666666, 269.38,
        271.79999999999995, 271.92333333333335, 269.18, 273.31666666666666,
        273.64000000000004, 269.9433333333333, 268.31333333333333, 266.67,
        267.47, 268.82666666666665, 265.27000000000004, 264.7666666666667,
        267.97333333333336, 264.3933333333333, 269.33333333333337,
        271.0266666666667, 271.06333333333333, 267.0466666666667,
        265.40333333333336, 265.1766666666667, 265.55, 266.8433333333333, 266.2,
        265.40666666666664, 266.08, 267.19, 267.13000000000005, 268.33,
        269.37666666666667, 270.3566666666666, 268.72333333333336, 270.2,
        270.58, 271.06333333333333, 271.0233333333333, 270.85333333333335,
        270.1366666666667, 270.50999999999993, 267.41333333333336,
        267.9733333333333, 268.15, 268.74666666666667, 265.3566666666667,
        256.95, 255.48000000000002, 254.33666666666667, 254.1633333333333,
        254.55999999999997, 252.95666666666668, 254.05000000000004, 252.9,
        252.91333333333333, 247.06000000000003, 247.0, 244.89666666666665,
        245.79666666666665, 244.07333333333335, 240.72333333333333,
        237.4466666666667, 238.20333333333335, 236.56999999999996,
        238.52333333333334]

    def test_typical_price(self):
        tp = typical_price.typical_price(self.close_data, self.high_data, self.low_data)
        np.testing.assert_array_equal(tp, self.tp_expected)

    def test_typical_price_invalid_data(self):
        self.close_data.append(1)
        with self.assertRaises(Exception):
            typical_price.typical_price(self.close_data, self.high_data, self.low_data)
